public class KnowYourTypesTests
{
    // Tasks: 
    // 1. Check types in each InlineData row. 
    // If needed, fix the third argument ("expected") to make the test valid.
    // "true" means that "type" is a subclass of "baseType".
    // 2. Implement logic to get isSubclass and verify your expectations.

    [Theory]
    [InlineData(typeof(object), typeof(object), false)]
    [InlineData(typeof(System.Object), typeof(object), false)]
    [InlineData(typeof(int), typeof(object), true)]
    [InlineData(typeof(object), typeof(List<int>), false)]
    [InlineData(typeof(int), typeof(System.ValueType), true)]
    [InlineData(typeof(string), typeof(System.ValueType), false)]
    [InlineData(typeof(char), typeof(System.ValueType), true)]
    [InlineData(typeof(decimal?), typeof(decimal), false)]
    [InlineData(typeof(Nullable<>), typeof(System.ValueType), true)]
    [InlineData(typeof(DateTime), typeof(System.ValueType), true)]
    [InlineData(typeof(Enum), typeof(System.ValueType), true)]
    [InlineData(typeof(Foo), typeof(System.ValueType), true)]
    [InlineData(typeof(Foo), typeof(Bar), false)]
    [InlineData(typeof(Bar), typeof(Baz), false)]
    [InlineData(typeof(Do), typeof(System.ValueType), false)]
    [InlineData(typeof(Action), typeof(Delegate), true)]
    [InlineData(typeof(Action<int>), typeof(Action), false)]
    [InlineData(typeof(FileStream), typeof(Stream), true)]
    [InlineData(typeof(ParameterizedThreadStart), typeof(System.ValueType), false)]
    [InlineData(typeof(List<Baz>), typeof(List<Bar>), false)]
    public void IsSubclassOf_ForGivenTypes_ShouldReturnExpected(Type type, Type baseType, bool expected)
    {
        var isSubclass = type.IsSubclassOf(baseType);
        Assert.Equal(expected, isSubclass);
    }

    public struct Foo { }
    public class Bar { }
    public class Baz : Bar { }
    public delegate void Do();
}
