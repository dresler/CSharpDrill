public class DateTimeFun
{
    // Return true if a date is a working day.
    [Theory]
    [InlineData(2017, 2, 27, true)]
    [InlineData(2017, 2, 28, true)]
    [InlineData(2017, 3, 1, true)]
    [InlineData(2017, 3, 2, true)]
    [InlineData(2017, 3, 3, true)]
    [InlineData(2017, 3, 4, false)]
    [InlineData(2017, 3, 5, false)]
    public void IsWorkingDay_ForGivenDate_ShouldReturnExpected(int year, int month, int day, bool expectedIsWorkingDay)
    {
        var date = new DateTime(year, month, day);
        var isWorkingDay = ! new[] {DayOfWeek.Saturday, DayOfWeek.Sunday}.Contains(date.DayOfWeek);

        Assert.Equal(expectedIsWorkingDay, isWorkingDay);
    }

    // Return number of preceding working days.
    [Theory]
    [InlineData(2017, 2, 27, 0, 0)]
    [InlineData(2017, 2, 27, 1, 0)]
    [InlineData(2017, 2, 27, 2, 0)]
    [InlineData(2017, 2, 27, 3, 1)]
    [InlineData(2017, 3, 1, 3, 2)]
    [InlineData(2017, 3, 2, 3, 3)]
    public void NumberOfPrecedingWorkingDays_ForGivenDate_ShouldReturnExpected(int year, int month, int day, int precedingDays, int expected)
    {
        var date = new DateTime(year, month, day);

        Predicate<DateTime> isWorkingDay =
            d => !new[] {DayOfWeek.Saturday, DayOfWeek.Sunday}.Contains(d.DayOfWeek);

        // Solution A - non-LINQ

        var numberOfWorkingDays = 0;

        for (int i = 1; i <= precedingDays; i++)
        {
            numberOfWorkingDays += isWorkingDay(date.AddDays(-i)) ? 1 : 0;
        }

        // Solution B - LINQ

        numberOfWorkingDays =
            Enumerable
                .Range(1, precedingDays)
                .Count(daysBefore => isWorkingDay(date.AddDays(-daysBefore)));

        Assert.Equal(expected, numberOfWorkingDays);
    }

    // Format the datetime to get the expected string.
    [Fact]
    public void FormatDate_ShouldReturnExpected()
    {
        var date = new DateTime(2017, 02, 24, 15, 31, 45, 456);

        var formatedDate = date.ToString("dd.MM.yyyy hh:mm tt", new CultureInfo("en-US")); // string.Empty; // To be implemented

        Assert.Equal("24.02.2017 03:31 PM", formatedDate);
    }

    // Return true if a day is a public holiday in the Czech Republic in 2017.
    [Theory]
    [InlineData(2017, 1, 1, true)]
    [InlineData(2017, 4, 14, true)]
    [InlineData(2017, 4, 17, true)]
    [InlineData(2017, 5, 1, true)]
    [InlineData(2017, 5, 8, true)]
    [InlineData(2017, 7, 5, true)]
    [InlineData(2017, 7, 6, true)]
    [InlineData(2017, 9, 28, true)]
    [InlineData(2017, 10, 28, true)]
    [InlineData(2017, 11, 17, true)]
    [InlineData(2017, 12, 24, true)]
    [InlineData(2017, 12, 25, true)]
    [InlineData(2017, 12, 26, true)]
    [InlineData(2017, 1, 2, false)]
    [InlineData(2017, 7, 4, false)]
    [InlineData(2017, 12, 31, false)]
    [InlineData(2016, 1, 1, false)]
    public void IsPublicHolidayIn2017_ForGivenDate_ShouldReturnExpected(int year, int month, int day, bool expectedIsPublicHoliday)
    {
        var date = new DateTime(year, month, day);

        var isPublicHolidayIn2017 = GetPublicHolidaysIn2017().Contains(date);

        Assert.Equal(expectedIsPublicHoliday, isPublicHolidayIn2017);
    }

    private IEnumerable<DateTime> GetPublicHolidaysIn2017()
    {
        yield return new DateTime(2017, 1, 1);
        yield return new DateTime(2017, 4, 14);
        yield return new DateTime(2017, 4, 17);
        yield return new DateTime(2017, 5, 1);
        yield return new DateTime(2017, 5, 8);
        yield return new DateTime(2017, 7, 5);
        yield return new DateTime(2017, 7, 6);
        yield return new DateTime(2017, 9, 28);
        yield return new DateTime(2017, 10, 28);
        yield return new DateTime(2017, 11, 17);
        yield return new DateTime(2017, 12, 24);
        yield return new DateTime(2017, 12, 25);
        yield return new DateTime(2017, 12, 26);
    }
}
